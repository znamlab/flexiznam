import pytest
import pathlib
import yaml
from click.testing import CliRunner
from flexiznam import cli
from flexiznam.config import config_tools
from tests.tests_resources.data_for_testing import PROCESSED_ROOT, TEST_PROJECT


def test_config(tmp_path):
    runner = CliRunner()
    result = runner.invoke(cli.config, ['--config_folder', tmp_path])
    assert result.exit_code == 0
    assert result.output.startswith('No configuration file. Creating one.')
    assert pathlib.Path.exists(tmp_path / 'config.yml')
    prm = config_tools.load_param(param_folder=tmp_path)
    assert prm['data_root']['raw'] == \
           r'/camp/lab/znamenskiyp/data/instruments/raw_data/projects'
    result = runner.invoke(cli.config, ['--config_folder', tmp_path])
    assert result.exit_code == 0
    assert result.output.startswith('Configuration file currently used is:')
    str_cfg = yaml.dump(config_tools.DEFAULT_CONFIG) + '\n'
    assert result.output.endswith(str_cfg)


def test_add_password(tmp_path):
    runner = CliRunner()
    pwd_file = tmp_path / 'pass.yml'
    result = runner.invoke(cli.add_password, ['--password_file', pwd_file,
                                              '--app', 'test_app', '--username', 'noone',
                                              '--password', '1234'])
    assert result.exit_code == 0
    assert result.output.startswith('Password added in')
    p = config_tools.get_password(username='noone',
                                  app='test_app',
                                  password_file=pwd_file)
    assert p == '1234'


def test_create_yaml(tmp_path):
    path2yaml = PROCESSED_ROOT / 'mouse_physio_2p'
    runner = CliRunner()
    out_yml = tmp_path / 'autogenerated.yml'
    result = runner.invoke(cli.create_yaml,
                           ['-s', path2yaml, '-t', out_yml])
    assert result.exit_code == 0


def test_make_full_yaml(tmp_path):
    path2yaml = PROCESSED_ROOT / 'mouse_physio_2p' / 'physio_acq_yaml.yml'
    runner = CliRunner()
    out_yml = tmp_path / 'autogenerated.yml'
    result = runner.invoke(cli.process_yaml,
                           ['-s', path2yaml, '-t', out_yml])
    assert result.exit_code == 0
    # read auto yaml
    with open(out_yml, 'r') as reader:
        auto_out = yaml.safe_load(reader)
    assert len(auto_out) == 10
    result = runner.invoke(cli.process_yaml, ['-s', path2yaml, '-t', out_yml])
    assert result.exit_code == 1
    result = runner.invoke(cli.process_yaml, ['-s', path2yaml, '-t', out_yml,
                                              '--overwrite'])
    assert result.exit_code == 0
    # read auto yaml
    with open(out_yml, 'r') as reader:
        auto_out = yaml.safe_load(reader)
    assert len(auto_out) == 10



def test_upload(tmp_path):
    path2yaml = PROCESSED_ROOT / 'mouse_physio_2p' / 'physio_acq_yaml_unvalid.yml'
    # first generate a yaml without and without error:
    runner = CliRunner()
    err_yml = tmp_path / 'with_error.yml'
    result = runner.invoke(cli.process_yaml, ['-s', path2yaml, '-t', err_yml])
    assert result.exit_code == 0

    path2yaml = PROCESSED_ROOT / 'mouse_physio_2p' / 'physio_acq_yaml.yml'
    out_yml = tmp_path / 'without_error.yml'
    result = runner.invoke(cli.process_yaml, ['-s', path2yaml, '-t', out_yml])
    assert result.exit_code == 0

    # now do the actual test
    result = runner.invoke(cli.yaml_to_flexilims, ['-s', err_yml, '-r', tmp_path])
    assert result.exit_code == 1
    assert result.output == 'Error: The yaml file still contains error. Fix it\n'

    result = runner.invoke(cli.yaml_to_flexilims, ['-s', out_yml, '--conflicts', 'skip'])
    assert result.exit_code == 0



def test_flm_issues(tmp_path):
    out_csv = tmp_path / 'report.csv'
    runner = CliRunner()
    result = runner.invoke(cli.check_flexilims_issues,
                           ['-t', out_csv, '-p', TEST_PROJECT])
    assert result.exit_code == 0
    assert out_csv.is_file()

