<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="3" skipped="4" tests="49" time="704.589" timestamp="2022-05-26T15:47:40.931375" hostname="C02Z85AULVDC"><testcase classname="tests.test_2p" name="test_create_yaml" time="98.102" /><testcase classname="tests.test_2p" name="test_parse_yaml" time="80.126" /><testcase classname="tests.test_2p" name="test_flm" time="127.280" /><testcase classname="tests.test_barseq" name="test_create_yaml" time="34.640" /><testcase classname="tests.test_barseq" name="test_parse_yaml" time="105.958" /><testcase classname="tests.test_barseq" name="test_flm" time="97.423" /><testcase classname="tests.test_brainsaw" name="test_create_yaml" time="4.633"><failure message="AssertionError">def test_create_yaml():
        """Test automatic yaml creation
    
        We check that the acquisition yaml can also be created automatically
        """
        saved_skeleton = PROCESSED_ROOT / MOUSE / YAML.replace('.yml',
                                                               'automatic_skeletion.yml')
        # To save the yaml the first time we add outfile:
&gt;       automat = create_yaml(DATA_ROOT / MOUSE, mouse=MOUSE,
                              project=TEST_PROJECT)#, outfile=saved_skeleton, overwrite=True)

tests/test_brainsaw.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

root_folder = PosixPath('/Volumes/lab-znamenskiyp/data/instruments/raw_data/projects/demo_project/mouse_brainsaw'), outfile = None, project = 'demo_project', mouse = 'mouse_brainsaw', overwrite = False

    def create_yaml(root_folder, outfile=None, project='NOT SPECIFIED',
                    mouse='NOT SPECIFIED', overwrite=False):
        """Automatically create a yaml file skeleton
    
        Goes recursively in root folder and create a set of nested structure
    
        Args:
            root_folder (str or Path): base folder, usually a session but can be a sample
            outfile (str or Path): target to write the yaml. Do not write file if `None`
            project (str): name of the project
            mouse (str): name of the mouse
            overwrite (bool): overwrite outfile if it exists. Default False.
    
        Returns:
            yaml_dict (dict): created structure
        """
        root_folder = pathlib.Path(root_folder)
&gt;       assert root_folder.is_dir()
E       AssertionError

flexiznam/camp/sync_data.py:34: AssertionError</failure></testcase><testcase classname="tests.test_brainsaw" name="test_parse_yaml" time="1.841"><failure message="FileNotFoundError: [Errno 2] No such file or directory: '/Volumes/lab-znamenskiyp/home/shared/projects/demo_project/mouse_brainsaw/brainsaw_yaml.yml'">def test_parse_yaml():
        """Test that we can parse the acq yaml
    
        We check that we can parse the yaml and that the output is similar to a known copy
        """
&gt;       parsed = parse_yaml(path_to_yaml=PROCESSED_ROOT / MOUSE / YAML,
                                               raw_data_folder=DATA_ROOT)

tests/test_brainsaw.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
flexiznam/camp/sync_data.py:96: in parse_yaml
    session_data = _clean_yaml(path_to_yaml)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

path_to_yaml = PosixPath('/Volumes/lab-znamenskiyp/home/shared/projects/demo_project/mouse_brainsaw/brainsaw_yaml.yml')

    def _clean_yaml(path_to_yaml):
        """Read a yaml file and check that it is correctly formatted
    
        This does not do any processing, just make sure that I can read the whole yaml and
        generate dictionary will all expected fields
    
        Args:
            path_to_yaml (str): path to the YAML file, or dict of the yaml content
    
        Returns:
            dict: nested dictionary containing entries in the YAML file
    
        """
    
        if isinstance(path_to_yaml, dict):
            yml_data = path_to_yaml
        else:
&gt;           with open(path_to_yaml, 'r') as yml_file:
E           FileNotFoundError: [Errno 2] No such file or directory: '/Volumes/lab-znamenskiyp/home/shared/projects/demo_project/mouse_brainsaw/brainsaw_yaml.yml'

flexiznam/camp/sync_data.py:472: FileNotFoundError</failure></testcase><testcase classname="tests.test_brainsaw" name="test_flm" time="0.213"><failure message="assert None is not None">def test_flm():
        """Check that we can upload to flexilims if the database is wiped"""
        if FLM_IS_WIPED:
            # there shouldn't be anything in the way, if there is we have an issue
            conflicts = 'abort'
        else:
            # entries already exist, just skip them. Will still crash if there is dataset
            # that has changed.
            conflicts = 'skip'
&gt;       physio_mouse_exists()

tests/test_brainsaw.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def physio_mouse_exists():
        mouse = fzn.get_entity(datatype='mouse', name=MOUSE,
                               flexilims_session=flexilims_session)
        if FLM_IS_WIPED:
            assert mouse is None
            # we need to add the mouse. If it was a real MCMS mouse we could do:
            # `fzn.add_mouse(project=test_data.TEST_PROJECT, mouse_name=MOUSE)`
            # but since it's a dummy mouse, I'll just add it manually:
            mouse = fzn.add_mouse(flexilims_session=flexilims_session,
                                  mouse_info=dict(birth_date='01-Mar-2021',
                                                  sex='Male',
                                                  animal_name=MOUSE),
                                  mouse_name=MOUSE,
                                  get_mcms_data=False)
        else:
&gt;           assert mouse is not None
E           assert None is not None

tests/test_brainsaw.py:93: AssertionError</failure></testcase><testcase classname="tests.test_components.test_cli" name="test_config" time="0.286" /><testcase classname="tests.test_components.test_cli" name="test_add_password" time="0.281" /><testcase classname="tests.test_components.test_cli" name="test_create_yaml" time="9.235" /><testcase classname="tests.test_components.test_cli" name="test_make_full_yaml" time="55.859" /><testcase classname="tests.test_components.test_cli" name="test_upload" time="17.997" /><testcase classname="tests.test_components.test_cli" name="test_flm_issues" time="15.326" /><testcase classname="tests.test_components.test_main" name="test_get_flexilims_session" time="0.172" /><testcase classname="tests.test_components.test_main" name="test_format_results" time="0.042" /><testcase classname="tests.test_components.test_main" name="test_get_experimental_sessions" time="0.192" /><testcase classname="tests.test_components.test_main" name="test_get_entities" time="0.326" /><testcase classname="tests.test_components.test_main" name="test_get_entity" time="0.023" /><testcase classname="tests.test_components.test_main" name="test_get_mouse_id" time="0.133" /><testcase classname="tests.test_components.test_main" name="test_generate_name" time="0.511" /><testcase classname="tests.test_components.test_main" name="test_get_children" time="0.150" /><testcase classname="tests.test_components.test_main" name="test_add_entity" time="0.405" /><testcase classname="tests.test_components.test_main" name="test_update_entity" time="0.938" /><testcase classname="tests.test_components.test_mcms" name="test_download_mouse" time="0.041"><skipped type="pytest.skip" message="need --runslow option to run">/Users/blota/code/flexiznam/tests/test_components/test_mcms.py:7: need --runslow option to run</skipped></testcase><testcase classname="tests.test_components.test_mcms" name="test_get_mouse_df" time="0.020"><skipped type="pytest.skip" message="need --runslow option to run">/Users/blota/code/flexiznam/tests/test_components/test_mcms.py:13: need --runslow option to run</skipped></testcase><testcase classname="tests.test_components.test_utils" name="test_create_config" time="0.136" /><testcase classname="tests.test_components.test_utils" name="test_update_config" time="0.127" /><testcase classname="tests.test_components.test_utils" name="test_passwd_creation" time="0.128" /><testcase classname="tests.test_components.test_utils" name="test_check_flexilims_paths" time="17.916" /><testcase classname="tests.test_components.test_utils" name="test_check_flexilims_names" time="16.537" /><testcase classname="tests.test_components.test_utils" name="test_add_genealogy" time="0.046"><skipped type="pytest.skip" message="need --runslow option to run">/Users/blota/code/flexiznam/tests/test_components/test_utils.py:71: need --runslow option to run</skipped></testcase><testcase classname="tests.test_components.test_utils" name="test_add_missing_paths" time="8.443" /><testcase classname="tests.test_components.test_utils" name="test_check_attribute" time="0.046"><skipped type="pytest.skip" message="need --runslow option to run">/Users/blota/code/flexiznam/tests/test_components/test_utils.py:83: need --runslow option to run</skipped></testcase><testcase classname="tests.test_components.tests_schema.test_camera_data" name="test_create_directly" time="0.075" /><testcase classname="tests.test_components.tests_schema.test_camera_data" name="test_create_from_folder" time="0.284" /><testcase classname="tests.test_components.tests_schema.test_camera_data" name="test_create_from_flexilims" time="0.557" /><testcase classname="tests.test_components.tests_schema.test_datasets" name="test_dataset" time="0.042" /><testcase classname="tests.test_components.tests_schema.test_datasets" name="test_constructor" time="0.022" /><testcase classname="tests.test_components.tests_schema.test_datasets" name="test_dataset_flexilims_integration" time="0.269" /><testcase classname="tests.test_components.tests_schema.test_datasets" name="test_from_flexilims" time="0.288" /><testcase classname="tests.test_components.tests_schema.test_datasets" name="test_from_origin" time="0.439" /><testcase classname="tests.test_components.tests_schema.test_datasets" name="test_update_flexilims" time="1.746" /><testcase classname="tests.test_components.tests_schema.test_datasets" name="test_dataset_paths" time="0.127" /><testcase classname="tests.test_components.tests_schema.test_datasets" name="test_project_project_id" time="0.041" /><testcase classname="tests.test_components.tests_schema.test_harp" name="test_harp" time="0.256" /><testcase classname="tests.test_components.tests_schema.test_microscopy_data" name="test_from_folder" time="0.128" /><testcase classname="tests.test_components.tests_schema.test_scanimage_data" name="test_scanimage" time="0.834" /></testsuite></testsuites>